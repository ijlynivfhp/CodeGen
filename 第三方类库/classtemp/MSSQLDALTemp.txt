using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
namespace @namespace@.DAL
{
    /// <summary>[@tabname@]表数据访问类
    /// 作者:IJLYNIVFHP(QQ:380726211)
    /// 创建时间:@createdate@
    /// </summary>
    public partial class @classname@DAL
    {
        public @classname@DAL()
        { }
        /// <summary>增加一条数据
        /// 
        /// </summary>
        public int Add(@namespace@.Model.@classname@ model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("insert into [@tabname@](");
            strSql.Append("@insertfields@ )");
            strSql.Append(" values (");
            strSql.Append("@insertvalues@ )");
            strSql.Append(";select @@IDENTITY");
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
@insertparam@
            int result;
            string obj = h.ExecuteScalar();
            if (!int.TryParse(obj, out result))
            {
                return 0;
            }
            return result;
        }

        /// <summary>更新一条数据
        /// 
        /// </summary>
        public bool Update(@namespace@.Model.@classname@ model)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update [@tabname@] set ");
            strSql.Append("@updatefields@ ");
            strSql.Append(" where @pkey@=@@pkey@ ");
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
@updateparam@
            return h.ExecuteNonQuery();
        }

        /// <summary>按条件更新数据
        /// 
        /// </summary>
        public bool UpdateByCond(string str_set, string cond)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("update [@tabname@] set "+str_set +" "); 
            strSql.Append(" where "+cond);
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
            return h.ExecuteNonQuery();
        }

        /// <summary>删除一条数据
        /// 
        /// </summary>
        public bool Delete(int @pkey@)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from [@tabname@] ");
            strSql.Append(" where @pkey@=@@pkey@ ");
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
            h.AddParameter("@@pkey@", @pkey@);
            return h.ExecuteNonQuery();
        }

        /// <summary>根据条件删除数据
        /// 
        /// </summary>
        public bool DeleteByCond(string cond)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("delete from [@tabname@] ");
            if (!string.IsNullOrEmpty(cond))
            {
                strSql.Append(" where " + cond);
            }
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
            return h.ExecuteNonQuery();
        }
		
        /// <summary>取一个字段的值
        /// 
        /// </summary>
        /// <param name="filed">字段，如sum(je)</param>
        /// <param name="cond">条件，如userid=2</param>
        /// <returns></returns>
        public string GetOneFiled(string filed, string cond, IDbDataParameter[] paras = null)
        {
            string sql = "select " + filed + " from [@tabname@]";
            if (!string.IsNullOrEmpty(cond))
            {
                sql += " where " + cond;
            }
			
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(sql);
            if (paras!=null)
            {
                h.AddParameter(paras);
            }
            return h.ExecuteScalar();
        }

        /// <summary>得到一个对象实体
        /// 
        /// </summary>
        public @namespace@.Model.@classname@ GetModel(int @pkey@)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select * from [@tabname@] ");
            strSql.Append(" where @pkey@=@@pkey@ ");
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
            h.AddParameter("@@pkey@", @pkey@);
            @namespace@.Model.@classname@ model = null;
            using (IDataReader dataReader = h.ExecuteReader())
            {
                if (dataReader.Read())
                {
                    model = ReaderBind(dataReader);
                }
                h.CloseConn();
            }
            return model;
        }

        /// <summary>根据条件得到一个对象实体
        /// 
        /// </summary>
        public @namespace@.Model.@classname@ GetModelByCond(string cond, IDbDataParameter[] paras = null)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select top 1 * from [@tabname@] ");
            if (!string.IsNullOrEmpty(cond))
            {
                strSql.Append(" where " + cond);
            }
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
            if (paras!=null)
            {
                h.AddParameter(paras);
            }
            @namespace@.Model.@classname@ model = null;
            using (IDataReader dataReader = h.ExecuteReader())
            {
                if (dataReader.Read())
                {
                    model = ReaderBind(dataReader);
                }
                h.CloseConn();
            }
            return model;
        }

        /// <summary>获得数据列表
        /// 
        /// </summary>
        public DataSet GetList(string strWhere)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select * ");
            strSql.Append(" FROM [@tabname@] ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
            DataTable dt = h.ExecuteQuery();
            DataSet ds = new DataSet();
            ds.Tables.Add(dt);
            return ds;
        }

        /// <summary>分页获取数据列表
        /// 
        /// </summary>
        public DataSet GetList(string fileds, string order, string ordertype, int PageSize, int PageIndex, string strWhere)
        {
           string cond = string.IsNullOrEmpty(strWhere) ? "" : string.Format(" where {0}", strWhere);
            string sql = string.Format("SELECT * FROM ( SELECT ROW_NUMBER() OVER (ORDER BY {0} {1}) AS pos, {2} FROM  [@tabname@] {3}  ) AS sp WHERE pos BETWEEN {4} AND {5}", order, ordertype, fileds, cond, (((PageIndex - 1) * PageSize) + 1), PageSize * PageIndex);

            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(sql); 
            DataTable dt = h.ExecuteQuery();
            DataSet ds = new DataSet();
            ds.Tables.Add(dt);
            return ds;
        }

         /// <summary>
        ///分页，使用offset,mssql2012以后有用
        /// </summary>
        /// <param name="fileds"></param>
        /// <param name="orderstr">如：yydate desc,yytime asc,id desc,必须形成唯一性</param>
        /// <param name="PageSize"></param>
        /// <param name="PageIndex"></param>
        /// <param name="strWhere"></param>
        /// <returns></returns>
        public DataTable GetListOFFSET(string fileds, string orderstr, int PageSize, int PageIndex, string strWhere) {

            if (!string.IsNullOrEmpty(strWhere))
            {
                strWhere = " where " + strWhere;
            }
            string sql = string.Format("select {0} from [@tabname@] {1} order by {2} offset {3} rows fetch next {4} rows only", fileds, strWhere, orderstr, (PageIndex - 1) * PageSize, PageSize);
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(sql);
            DataTable dt = h.ExecuteQuery();
            return dt;

        }

        /// <summary>获得数据列表（比DataSet效率高，推荐使用）
        /// 
        /// </summary>
        public List<@namespace@.Model.@classname@> GetListArray(string strWhere, IDbDataParameter[] paras = null)
        {
            StringBuilder strSql = new StringBuilder();
            strSql.Append("select * ");
            strSql.Append(" FROM [@tabname@] ");
            if (strWhere.Trim() != "")
            {
                strSql.Append(" where " + strWhere);
            }
            List<@namespace@.Model.@classname@> list = new List<@namespace@.Model.@classname@>();
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(strSql.ToString());
			if (paras!=null)
            {
                h.AddParameter(paras);
            }
            using (IDataReader dataReader = h.ExecuteReader())
            {
                while (dataReader.Read())
                {
                    list.Add(ReaderBind(dataReader));
                }
                h.CloseConn();
            }
            return list;
        }

        /// <summary>分页获取数据列表
        /// 
        /// </summary>
        public List<@namespace@.Model.@classname@> GetListArray(string fileds, string order, string ordertype, int PageSize, int PageIndex, string strWhere, IDbDataParameter[] paras = null)
        {
		//  string cond = string.IsNullOrEmpty(strWhere) ? "" : $" where {strWhere}";
           // string sql = $"SELECT * FROM ( SELECT ROW_NUMBER() OVER (ORDER BY {order} {ordertype}) AS pos, {fileds} FROM  [@tabname@] {cond}  ) AS sp WHERE pos BETWEEN {(((PageIndex - 1) * PageSize) + 1)} AND {PageSize * PageIndex}";

            string cond = string.IsNullOrEmpty(strWhere) ? "" : string.Format(" where {0}",strWhere);
            string sql = string.Format("SELECT * FROM ( SELECT ROW_NUMBER() OVER (ORDER BY {0} {1}) AS pos, {2} FROM  [@tabname@] {3}  ) AS sp WHERE pos BETWEEN {4} AND {5}",order,ordertype,fileds,cond, (((PageIndex - 1) * PageSize) + 1), PageSize * PageIndex);
          
            MSSQLHelper h = new MSSQLHelper();
			h.CreateCommand(sql);
            if (paras != null)
            {
                h.AddParameter(paras);
            } 

           /* h.CreateStoredCommand("[proc_SplitPage]");
            h.AddParameter("@tblName", "[@tabname@]");
            h.AddParameter("@strFields", fileds);
            h.AddParameter("@strOrder", order);
            h.AddParameter("@strOrderType", ordertype);
            h.AddParameter("@PageSize", PageSize);
            h.AddParameter("@PageIndex", PageIndex);
            h.AddParameter("@strWhere", strWhere);*/

            List<@namespace@.Model.@classname@> list = new List<@namespace@.Model.@classname@>();
            using (IDataReader dataReader = h.ExecuteReader())
            {
                while (dataReader.Read())
                {
                    list.Add(ReaderBind(dataReader));
                }
                h.CloseConn();
            }
            return list;
        }

         /// <summary>
        ///分页，使用offset,mssql2012以后有用
        /// </summary>
        /// <param name="fileds"></param>
        /// <param name="orderstr">如：yydate desc,yytime asc,id desc,必须形成唯一性</param>
        /// <param name="PageSize"></param>
        /// <param name="PageIndex"></param>
        /// <param name="strWhere"></param>
        /// <returns></returns>
        public List<@namespace@.Model.@classname@> GetListArrayOFFSET(string fileds, string orderstr, int PageSize, int PageIndex, string strWhere) {

            if (!string.IsNullOrEmpty(strWhere))
            {
                strWhere = " where " + strWhere;
            }
            string sql = string.Format("select {0} from [@tabname@] {1} order by {2} offset {3} rows fetch next {4} rows only", fileds, strWhere, orderstr, (PageIndex - 1) * PageSize, PageSize);
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(sql);
            List<@namespace@.Model.@classname@> list = new List<@namespace@.Model.@classname@>();
            using (IDataReader dataReader = h.ExecuteReader())
            {
                while (dataReader.Read())
                {
                    list.Add(ReaderBind(dataReader));
                }
                h.CloseConn();
            }
            return list;
        }

        /// <summary>对象实体绑定数据
        /// 
        /// </summary>
        public @namespace@.Model.@classname@ ReaderBind(IDataReader dataReader)
        {
            @namespace@.Model.@classname@ model = new @namespace@.Model.@classname@();
            object ojb;
@ReaderBindParam@
            return model;
        }

        /// <summary>计算记录数
        /// 
        /// </summary>
        /// <param name="p"></param>
        /// <returns></returns>
        public int CalcCount(string cond, IDbDataParameter[] paras = null)
        {
            string sql = "select count(1) from [@tabname@]";
            if (!string.IsNullOrEmpty(cond))
            {
                sql += " where " + cond;
            }
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(sql);
			if (paras!=null)
            {
                h.AddParameter(paras);
            }
            return int.Parse(h.ExecuteScalar());
        }

         /// <summary>取distinct的datatable
        /// 
        /// </summary>
        /// <param name="fileds">字段</param>
        /// <param name="cond">条件</param>
        /// <returns></returns>
        public DataTable GetDistinctTable(string fileds, string cond) {
            string sql = "select distinct "+fileds+" from [@tabname@] ";
            if (!string.IsNullOrEmpty(cond))
            {
                sql += " where "+cond;
            }
            MSSQLHelper h = new MSSQLHelper();
            h.CreateCommand(sql);
            return h.ExecuteQuery();
        }
    }
}

